name: Build and Deploy Application

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Use a repository variable for the app name for reusability.
# Go to Repo Settings > Secrets and variables > Actions > Variables to set this.
env:
  APP_NAME: ${{ vars.APP_NAME || 'dormed' }}

jobs:
  build:
    name: Build Frontend and Package
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Frontend .env for React build
        run: echo "${{ secrets.FRONTEND_ENV_VARS }}" > frontend/.env

      - name: Build React frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      - name: Create deployment package
        run: |
          echo "Current path is: $(pwd)"
          ls 
          touch deploy-package.tar.gz
          tar --exclude-from='.gitignore' \
              --exclude='.git' \
              --exclude='frontend/node_modules' \
              --exclude='venv' \
              --exclude='deploy-package.tar.gz' \
              -czf deploy-package.tar.gz .
      
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-deploy-package
          path: deploy-package.tar.gz

  deploy:
    name: Deploy to Oracle Cloud VM
    runs-on: self-hosted
    needs: build
    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-deploy-package

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/id_rsa_oracle
          chmod 600 ~/.ssh/id_rsa_oracle
          echo "SSH_KEY_PATH=~/.ssh/id_rsa_oracle" >> $GITHUB_ENV

      - name: Upload to Oracle VM
        run: |
          scp -i ${{ env.SSH_KEY_PATH }} -o StrictHostKeyChecking=no deploy-package.tar.gz ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }}:/tmp/

      - name: Deploy on Oracle VM
        run: |
          ssh -i ${{ env.SSH_KEY_PATH }} -o StrictHostKeyChecking=no ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} 'bash -s' <<'EOF'
            set -e # Exit immediately if a command fails

            # --- Variables ---
            APP_NAME="${{ env.APP_NAME }}"
            PROJECT_DIR="/home/${{ secrets.ORACLE_USER }}/${APP_NAME}"
            VENV_DIR="$PROJECT_DIR/venv"
            DB_NAME="${APP_NAME}_db"
            DB_USER="${APP_NAME}_user"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}" # Assumes you have this secret

            # --- 1. System & MariaDB Setup ---
            echo "=== Updating system packages and installing dependencies ==="
            sudo apt-get update -y
            sudo apt install pkg-config
            sudo apt-get install -y mariadb-server libmariadb-dev-compat libmariadb-dev build-essential nginx python3-venv python3-dev

            echo "=== Securing MariaDB and creating database ==="
            sudo mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};"
            sudo mysql -e "CREATE USER IF NOT EXISTS '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';"
            sudo mysql -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
            sudo mysql -e "FLUSH PRIVILEGES;"

            echo "=== Verifying MariaDB service is active ==="
            sudo systemctl is-active --quiet mariadb

            # --- 2. Nginx Setup ---
            echo "=== Configuring Nginx ==="
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo tee /etc/nginx/sites-available/${APP_NAME} > /dev/null <<'NGINX_CONF'
            server {
                listen 80;
                server_name ${{ secrets.DOMAIN_NAME }}; # e.g., yourdomain.com
                location = /favicon.ico { access_log off; log_not_found off; }              
                location /static/ {
                    root ${PROJECT_DIR};
                }
                location / {
                    include proxy_params;
                    proxy_pass http://unix:/run/${APP_NAME}.sock;
                }
            }
            NGINX_CONF


            sudo ln -sf /etc/nginx/sites-available/${APP_NAME} /etc/nginx/sites-enabled/
            sudo nginx -t # Test nginx configuration
            sudo systemctl restart nginx
            
            echo "=== Verifying Nginx service is active ==="
            sudo systemctl is-active --quiet nginx


            # --- 3. Application Deployment ---
            echo "=== Setting up application directory ==="
            mkdir -p $PROJECT_DIR
            # Clean previous content before extracting
            find $PROJECT_DIR -mindepth 1 -delete
            tar -xzf /tmp/deploy-package.tar.gz -C $PROJECT_DIR
            rm /tmp/deploy-package.tar.gz

            echo "=== Creating backend .env file ==="
            echo "${{ secrets.DJANGO_ENV_VARS }}" > $PROJECT_DIR/.env
            chmod 600 $PROJECT_DIR/.env

            # --- 4. Python Environment & Dependencies ---
            echo "=== Setting up Python virtual environment ==="
            python3 -m venv $VENV_DIR
            source $VENV_DIR/bin/activate
            pip install --upgrade pip
            pip install -r $PROJECT_DIR/requirements.txt
            
            # --- 5. Django Setup ---
            echo "=== Running Django migrations and collecting static files ==="
            python $PROJECT_DIR/manage.py migrate
            deactivate

            # --- 6. Gunicorn Service Setup ---
            echo "=== Creating Gunicorn systemd service file ==="
            sudo tee /etc/systemd/system/${APP_NAME}.service > /dev/null <<'GUNICORN_SERVICE'
            [Unit]
            Description=gunicorn daemon for ${APP_NAME}
            After=network.target

            [Service]
            User=${{ secrets.ORACLE_USER }}
            Group=www-data
            WorkingDirectory=${PROJECT_DIR}
            # Assumes your project has a wsgi file at <APP_NAME>/wsgi.py
            ExecStart=${VENV_DIR}/bin/gunicorn --workers 3 --bind unix:/run/${APP_NAME}.sock ${APP_NAME}.wsgi:application

            [Install]
            WantedBy=multi-user.target
            GUNICORN_SERVICE
            
            sudo systemctl daemon-reload
            sudo systemctl restart ${APP_NAME}
            sudo systemctl enable ${APP_NAME}

            echo "=== Deployment successful for ${APP_NAME}! ==="
          EOF
